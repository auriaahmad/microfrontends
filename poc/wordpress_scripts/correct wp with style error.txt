// Minimal WordPress Microfrontend Authentication Integration with Remote Header
function add_minimal_wp_auth_scripts() {
    ?>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script>
    // Make React available globally
    window.React = React;
    window.ReactDOM = ReactDOM;
    
    // Set up webpack sharing scope
    window.__webpack_share_scopes__ = window.__webpack_share_scopes__ || {};
    window.__webpack_share_scopes__.default = window.__webpack_share_scopes__.default || {};
    
    window.__webpack_share_scopes__.default.react = {
      "18.0.0": {
        get: () => () => React,
        loaded: true
      }
    };
    window.__webpack_share_scopes__.default["react-dom"] = {
      "18.0.0": {
        get: () => () => ReactDOM,
        loaded: true
      }
    };
    
    window.__webpack_init_sharing__ = window.__webpack_init_sharing__ || (() => Promise.resolve());
    
    // WordPress Authentication State (same as TYPO3)
    let wpAuthState = {
        isAuthenticated: false,
        user: null,
        accessToken: null,
        logs: []
    };
    
    // Save auth state to localStorage
    function saveWpAuthState() {
        if (wpAuthState.isAuthenticated) {
            localStorage.setItem('wp_auth_state', JSON.stringify({
                isAuthenticated: wpAuthState.isAuthenticated,
                user: wpAuthState.user,
                accessToken: wpAuthState.accessToken
            }));
        } else {
            localStorage.removeItem('wp_auth_state');
        }
    }
    
    // Load auth state from localStorage
    function loadWpAuthState() {
        try {
            const saved = localStorage.getItem('wp_auth_state');
            if (saved) {
                const parsed = JSON.parse(saved);
                wpAuthState.isAuthenticated = parsed.isAuthenticated;
                wpAuthState.user = parsed.user;
                wpAuthState.accessToken = parsed.accessToken;
                addWpLog('üîÑ Auth state restored from localStorage');
                return true;
            }
        } catch (error) {
            addWpLog(`‚ùå Error loading auth state: ${error.message}`);
        }
        return false;
    }
    
    // Make wpAuthState globally available
    window.wpAuthState = wpAuthState;
    
    // Logging function
    function addWpLog(message) {
        const timestamp = new Date().toLocaleTimeString();
        const logMessage = `${timestamp}: ${message}`;
        wpAuthState.logs.push(logMessage);
        
        const logDisplay = document.getElementById('wp-log-display');
        if (logDisplay && logDisplay.style.display !== 'none') {
            logDisplay.innerHTML = wpAuthState.logs.join('<br>');
            logDisplay.scrollTop = logDisplay.scrollHeight;
        }
        
        console.log(`üî∑ WordPress: ${message}`);
    }
    
    // Toggle logs
    function toggleWpLogs() {
        const logDisplay = document.getElementById('wp-log-display');
        if (logDisplay.style.display === 'none') {
            logDisplay.style.display = 'block';
            logDisplay.innerHTML = wpAuthState.logs.join('<br>');
            logDisplay.scrollTop = logDisplay.scrollHeight;
        } else {
            logDisplay.style.display = 'none';
        }
    }
    
    // Clear logs
    function clearWpLogs() {
        wpAuthState.logs = ['WordPress logs cleared...'];
        const logDisplay = document.getElementById('wp-log-display');
        if (logDisplay && logDisplay.style.display !== 'none') {
            logDisplay.innerHTML = wpAuthState.logs.join('<br>');
        }
    }
    
    // Fixed logout function - aggressively clear EVERYTHING
    function logoutWp() {
        addWpLog('üö™ Starting aggressive logout - clearing all possible storage...');
        
        // Clear main state
        wpAuthState.isAuthenticated = false;
        wpAuthState.user = null;
        wpAuthState.accessToken = null;
        
        // Clear ALL localStorage keys that might contain tokens
        localStorage.removeItem('wp_auth_state');
        localStorage.removeItem('user_data');
        localStorage.removeItem('auth_state');
        localStorage.removeItem('jwt_token');
        localStorage.removeItem('access_token');
        localStorage.removeItem('authToken');
        localStorage.removeItem('user_token');
        localStorage.removeItem('refreshToken');
        
        // Clear ALL sessionStorage too
        sessionStorage.removeItem('wp_auth_state');
        sessionStorage.removeItem('user_data');
        sessionStorage.removeItem('auth_state');
        sessionStorage.removeItem('jwt_token');
        sessionStorage.removeItem('access_token');
        sessionStorage.removeItem('authToken');
        sessionStorage.removeItem('user_token');
        sessionStorage.removeItem('refreshToken');	
        
        // Clear any global window variables that might store tokens
        if (window.authToken) window.authToken = null;
        if (window.jwt) window.jwt = null;
        if (window.accessToken) window.accessToken = null;
        if (window.userToken) window.userToken = null;
        
        // Force garbage collection of any cached fetch headers
        window.fetch = window.fetch; // Reset fetch to clear any cached headers
        
        addWpLog('üßπ Cleared localStorage, sessionStorage, and window variables');
        addWpLog('üîç Current wpAuthState.accessToken: ' + (wpAuthState.accessToken || 'NULL'));
        addWpLog('üîç localStorage wp_auth_state: ' + (localStorage.getItem('wp_auth_state') || 'NULL'));
        addWpLog('üîç sessionStorage wp_auth_state: ' + (sessionStorage.getItem('wp_auth_state') || 'NULL'));
        
        // Force immediate UI update
        updateWpAuthStatus();
        updateWpRemoteHeader(); // Update remote header
        
        // Hide API results
        const responseDiv = document.getElementById('wp-api-response');
        const errorDiv = document.getElementById('wp-api-error');
        if (responseDiv) responseDiv.style.display = 'none';
        if (errorDiv) errorDiv.style.display = 'none';
        
        // Broadcast logout to other components
        window.postMessage({
            type: 'AUTH_LOGOUT'
        }, '*');
        
        addWpLog('‚úÖ Aggressive logout completed - all tokens should be cleared');
    }

    // Fixed API testing function - DEBUG MODE with aggressive token checking
    async function testWpAPI() {
        addWpLog('üîç DEBUG: Starting API test - checking ALL possible token sources...');
        
        // Check ALL possible places where token might be stored
        const stateToken = wpAuthState.accessToken;
        const localToken = localStorage.getItem('wp_auth_state');
        const sessionToken = sessionStorage.getItem('wp_auth_state');
        const windowToken = window.authToken || window.jwt || window.accessToken;
        
        addWpLog(`üîç wpAuthState.accessToken: ${stateToken ? stateToken.substring(0, 20) + '...' : 'NULL'}`);
        addWpLog(`üîç localStorage token: ${localToken ? 'EXISTS' : 'NULL'}`);
        addWpLog(`üîç sessionStorage token: ${sessionToken ? 'EXISTS' : 'NULL'}`);
        addWpLog(`üîç window.authToken: ${windowToken ? 'EXISTS' : 'NULL'}`);
        addWpLog(`üîç wpAuthState.isAuthenticated: ${wpAuthState.isAuthenticated}`);
        
        // If NO token found anywhere, block the request
        if (!stateToken || stateToken.trim() === '' || !wpAuthState.isAuthenticated) {
            addWpLog('‚ùå BLOCKING API CALL - No valid token found in any location');
            
            // Force complete logout
            logoutWp();
            return;
        }
        
        const responseDiv = document.getElementById('wp-api-response');
        const errorDiv = document.getElementById('wp-api-error');
        const apiButton = document.getElementById('wp-test-api');
        
        if (!responseDiv || !errorDiv || !apiButton) {
            addWpLog('‚ùå API testing elements not found');
            return;
        }
        
        responseDiv.style.display = 'none';
        errorDiv.style.display = 'none';
        
        apiButton.textContent = 'Testing WordPress API...';
        apiButton.disabled = true;
        
        addWpLog(`üì° Making request with token: ${stateToken.substring(0, 20)}...`);
        
        try {
            const response = await fetch('http://localhost:3002/api/user/profile', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${stateToken}`
                }
            });
            
            addWpLog(`üì° Response status: ${response.status}`);
            
            if (response.ok) {
                const data = await response.json();
                
                responseDiv.innerHTML = `
                    <h4 style="color: #28a745; margin: 0 0 10px 0;">‚úÖ WordPress API Response Success:</h4>
                    <pre style="background: #f8f9fa; padding: 15px; border-radius: 4px; font-size: 14px; overflow: auto; max-height: 300px; border: 1px solid #e0e0e0;">${JSON.stringify(data, null, 2)}</pre>
                `;
                responseDiv.style.display = 'block';
                
                addWpLog('‚úÖ WordPress API test successful');
            } else {
                const errorData = await response.json();
                
                // If unauthorized, force logout
                if (response.status === 401 || response.status === 403) {
                    addWpLog('üîë Token invalid/expired - forcing aggressive logout');
                    logoutWp();
                    return;
                }
                
                throw new Error(errorData.error || `HTTP ${response.status}`);
            }
            
        } catch (error) {
            addWpLog(`‚ùå API Error: ${error.message}`);
            
            errorDiv.innerHTML = `
                <h4 style="color: #dc3545; margin: 0 0 10px 0;">‚ùå WordPress API Error:</h4>
                <div style="background: #ffebee; padding: 15px; border-radius: 4px; border: 1px solid #f44336; color: #721c24;">
                    ${error.message}
                </div>
            `;
            errorDiv.style.display = 'block';
            
            addWpLog(`‚ùå WordPress API test failed: ${error.message}`);
        } finally {
            apiButton.textContent = 'Test WordPress User Profile API';
            // Re-check auth state before enabling button
            const stillHasToken = wpAuthState.accessToken && wpAuthState.accessToken.trim() !== '';
            apiButton.disabled = !wpAuthState.isAuthenticated || !stillHasToken;
            
            addWpLog(`üîç API test finished - button disabled: ${apiButton.disabled}`);
        }
    }

    // Fixed auth status update - strict validation
    function updateWpAuthStatus() {
        const statusDiv = document.getElementById('wp-auth-status');
        const apiButton = document.getElementById('wp-test-api');
        
        if (!statusDiv || !apiButton) {
            addWpLog('‚ö†Ô∏è Auth status elements not found, will retry...');
            return;
        }
        
        // Check current state (don't trust cached values)
        const hasToken = wpAuthState.accessToken && wpAuthState.accessToken.trim() !== '';
        const isAuthenticated = wpAuthState.isAuthenticated;
        const hasUser = wpAuthState.user;
        
        // All three must be true
        if (isAuthenticated && hasToken && hasUser) {
            statusDiv.innerHTML = `
                <strong>Status:</strong> <span style="color: #28a745;">üü¢ Authenticated</span><br>
                <small><strong>User:</strong> ${wpAuthState.user.username} | <strong>Role:</strong> ${wpAuthState.user.role}</small><br>
                <small><strong>JWT:</strong> ${wpAuthState.accessToken.substring(0, 30)}...</small>
            `;
            statusDiv.style.background = '#d4edda';
            
            apiButton.disabled = false;
            apiButton.style.background = '#28a745';
            apiButton.style.cursor = 'pointer';
            apiButton.onclick = testWpAPI;
        } else {
            statusDiv.innerHTML = '<strong>Status:</strong> <span style="color: #dc3545;">üî¥ Not Authenticated</span>';
            statusDiv.style.background = '#ffebee';
            
            apiButton.disabled = true;
            apiButton.style.background = '#ccc';
            apiButton.style.cursor = 'not-allowed';
            apiButton.onclick = null;
        }
        
        updateWpRemoteHeader(); // Update remote header
    }
    
    // Update remote header with auth state
    function updateWpRemoteHeader() {
        // Send auth state to remote header component
        window.postMessage({
            type: 'WP_AUTH_STATE_UPDATE',
            payload: {
                isAuthenticated: wpAuthState.isAuthenticated,
                user: wpAuthState.user,
                accessToken: wpAuthState.accessToken
            }
        }, '*');
    }
    
    // Listen for authentication messages from remote app
    window.addEventListener('message', (event) => {
        addWpLog(`üì® Received message: ${event.data.type}`);
        
        if (event.data.type === 'AUTH_TOKEN_UPDATE') {
            const { accessToken, user, source } = event.data.payload;
            
            wpAuthState.isAuthenticated = true;
            wpAuthState.user = user;
            wpAuthState.accessToken = accessToken;
            
            addWpLog(`üîë JWT token received in WordPress from ${source}`);
            addWpLog(`üë§ User authenticated: ${user.username} (${user.role})`);
            
            saveWpAuthState(); // Save to localStorage
            updateWpAuthStatus();
        }
        
        if (event.data.type === 'AUTH_LOGOUT') {
            logoutWp();
        }
        
        // Handle header navigation
        if (event.data.type === 'NAVIGATE_TO') {
            const destination = event.data.payload.destination;
            addWpLog(`üß≠ Navigation request: ${destination}`);
            
            if (destination === 'dashboard') {
                window.location.href = '<?php echo home_url('/remote-component'); ?>';
            } else if (destination === 'profile') {
                window.location.href = '<?php echo home_url('/profile'); ?>';
            }
        }
        
        // Handle logout from header
        if (event.data.type === 'HEADER_LOGOUT') {
            addWpLog('üö™ Logout initiated from remote header');
            logoutWp();
        }
    });
    
    // Load WordPress Authentication Components
    async function loadWpAuthentication() {
        try {
            addWpLog('üöÄ Loading WordPress authentication components...');
            
            const script = document.createElement('script');
            script.src = 'http://localhost:3001/remoteEntry.js';
            
            script.onload = async function() {
                try {
                    addWpLog('üì¶ Remote entry loaded, getting container...');
                    
                    let attempts = 0;
                    while (!window.remoteCounter && attempts < 10) {
                        await new Promise(resolve => setTimeout(resolve, 200));
                        attempts++;
                    }
                    
                    if (!window.remoteCounter) {
                        throw new Error('Remote container not found after waiting');
                    }
                    
                    const container = window.remoteCounter;
                    addWpLog('‚úÖ Container found, initializing...');
                    
                    await container.init(window.__webpack_share_scopes__.default);
                    
                    // Load authentication components
                    const authProviderFactory = await container.get('./AuthProvider');
                    const AuthProvider = authProviderFactory().default;
                    
                    const loginComponentFactory = await container.get('./LoginComponent');
                    const LoginComponent = loginComponentFactory().default;
                    
                    // Load header component
                    const headerFactory = await container.get('./Header');
                    const Header = headerFactory().default;
                    
                    addWpLog('üîê Authentication and header components loaded successfully');
                    
                    // Render header
                    const headerDiv = document.getElementById('wp-remote-header');
                    if (headerDiv) {
                        headerDiv.innerHTML = '';
                        const headerRoot = ReactDOM.createRoot(headerDiv);
                        
                        headerRoot.render(
                            React.createElement(Header, {
                                currentPage: getCurrentPage(),
                                authState: {
                                    isAuthenticated: wpAuthState.isAuthenticated,
                                    user: wpAuthState.user
                                },
                                onNavigate: (destination) => {
                                    if (destination === 'dashboard') {
                                        window.location.href = '<?php echo home_url('/remote-component'); ?>';
                                    } else if (destination === 'profile') {
                                        window.location.href = '<?php echo home_url('/profile'); ?>';
                                    }
                                },
                                onLogout: () => {
                                    logoutWp();
                                }
                            })
                        );
                        
                        addWpLog('‚úÖ Remote header rendered successfully!');
                    }
                    
                    // Render authentication component
                    const authDiv = document.getElementById('wp-auth-component');
                    if (authDiv) {
                        authDiv.innerHTML = '';
                        const authRoot = ReactDOM.createRoot(authDiv);
                        
                        authRoot.render(
                            React.createElement(AuthProvider, {}, 
                                React.createElement(LoginComponent)
                            )
                        );
                        
                        addWpLog('‚úÖ WordPress authentication component rendered successfully!');
                    }
                    
                } catch (error) {
                    addWpLog(`‚ùå Failed to initialize WordPress components: ${error.message}`);
                    document.getElementById('wp-auth-component').innerHTML = 
                        '<p style="color: red; padding: 15px; background: #ffebee; border-radius: 4px;">Failed to load authentication: ' + error.message + '</p>';
                }
            };
            
            script.onerror = function() {
                addWpLog('‚ùå Failed to load remote entry script');
                document.getElementById('wp-auth-component').innerHTML = 
                    '<p style="color: red; padding: 15px; background: #ffebee; border-radius: 4px;">Failed to load remote authentication script</p>';
            };
            
            document.head.appendChild(script);
            
        } catch (error) {
            addWpLog(`‚ùå Error in loadWpAuthentication: ${error.message}`);
            document.getElementById('wp-auth-component').innerHTML = 
                '<p style="color: red; padding: 15px; background: #ffebee; border-radius: 4px;">Error: ' + error.message + '</p>';
        }
    }
    
    // Get current page for header
    function getCurrentPage() {
        const path = window.location.pathname;
        if (path.includes('/remote-component')) return 'dashboard';
        if (path.includes('/profile')) return 'profile';
        return 'dashboard';
    }
    
    // Initialize WordPress authentication system only when DOM is ready
    function initializeWpAuth() {
        addWpLog('üî∑ WordPress authentication system starting...');
        
        // Load saved auth state first
        loadWpAuthState();
        
        // Only update status if elements exist
        const statusDiv = document.getElementById('wp-auth-status');
        if (statusDiv) {
            updateWpAuthStatus();
        }
        
        // Start loading authentication components
        setTimeout(loadWpAuthentication, 1000);
    }
    
    // Wait for DOM to be ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeWpAuth);
    } else {
        // DOM is already loaded
        setTimeout(initializeWpAuth, 100);
    }
    
    </script>
    <?php
}
add_action('wp_head', 'add_minimal_wp_auth_scripts');

// WordPress Authentication Shortcode - Updated with Remote Header
function wp_minimal_auth_shortcode() {
    return '
    <div class="wp-auth-microfrontend">
        <!-- Remote Header Container -->
        <div id="wp-remote-header" style="margin-bottom: 20px;">
            <div style="background: linear-gradient(135deg, #2196F3, #1976D2); padding: 15px 20px; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
                <div style="display: flex; justify-content: center; align-items: center;">
                    <div style="color: white; font-size: 16px;">üîÑ Loading Remote Header...</div>
                </div>
            </div>
        </div>
        
        <h2>üî∑ WordPress Telecom Authentication System</h2>
        
        <!-- Authentication Container -->
        <div id="wp-auth-component" style="border: 2px solid #2196F3; padding: 20px; margin: 20px 0; border-radius: 8px; background: #f9f9f9;">
            <h3>Remote Authentication Component</h3>
            <p>Loading authentication from remote app...</p>
        </div>
        
        <!-- WordPress API Testing Container -->
        <div id="wp-api-testing" style="border: 2px solid #ff5722; padding: 20px; margin: 20px 0; border-radius: 8px; background: #fff3e0;">
            <h3>üß™ WordPress API Testing Dashboard</h3>
            <div id="wp-auth-status" style="padding: 10px; background: #ffebee; border-radius: 4px; margin-bottom: 15px;">
                <strong>Status:</strong> <span style="color: #dc3545;">üî¥ Not Authenticated</span>
            </div>
            <button id="wp-test-api" disabled style="background: #ccc; color: white; border: none; padding: 12px 24px; border-radius: 4px; cursor: not-allowed; font-size: 16px; font-weight: bold;">
                Test WordPress User Profile API
            </button>
            <div id="wp-api-response" style="margin-top: 15px; display: none;"></div>
            <div id="wp-api-error" style="margin-top: 15px; display: none;"></div>
        </div>
        
        <!-- Activity Logs -->
        <div id="wp-logs" style="border: 2px solid #6c757d; padding: 20px; margin: 20px 0; border-radius: 8px; background: #f8f9fa;">
            <h3>üìã WordPress Activity Logs</h3>
            <div style="display: flex; gap: 10px; margin-bottom: 10px;">
                <button onclick="toggleWpLogs()" style="background: #2196F3; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;">
                    Toggle Logs
                </button>
                <button onclick="clearWpLogs()" style="background: #666; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer; font-size: 12px;">
                    Clear Logs
                </button>
            </div>
            <div id="wp-log-display" style="background: #000; color: #00ff00; padding: 10px; border-radius: 4px; font-family: monospace; font-size: 12px; max-height: 200px; overflow-y: auto; display: none;">
                WordPress authentication system initialized...
            </div>
        </div>
    </div>';
}
add_shortcode('wp_auth', 'wp_minimal_auth_shortcode');

// WordPress Profile Page Shortcode - Updated with Remote Header
function wp_profile_shortcode() {
    return '
    <div id="wp-profile-container">
        <!-- Remote Header Container -->
        <div id="wp-remote-header" style="margin-bottom: 20px;">
            <div style="background: linear-gradient(135deg, #2196F3, #1976D2); padding: 15px 20px; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
                <div style="display: flex; justify-content: center; align-items: center;">
                    <div style="color: white; font-size: 16px;">üîÑ Loading Remote Header...</div>
                </div>
            </div>
        </div>
        
        <div id="wp-profile-content" style="text-align: center; padding: 40px; color: #666;">
            <div style="width: 40px; height: 40px; border: 4px solid #e3f2fd; border-top: 4px solid #2196f3; border-radius: 50%; animation: wp-spin 1s linear infinite; margin: 0 auto 20px;"></div>
            <p>Checking WordPress authentication...</p>
        </div>
    </div>
    
    <style>
    @keyframes wp-spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    </style>
    
    <script>
    // Check if user is authenticated and show profile - Fixed validation
    function checkWpProfile() {
        const profileContent = document.getElementById("wp-profile-content");
        
        // First try to get from global state
        let authState = window.wpAuthState;
        
        // If not available, try to load from localStorage
        if (!authState || !authState.isAuthenticated) {
            try {
                const saved = localStorage.getItem("wp_auth_state");
                if (saved) {
                    authState = JSON.parse(saved);
                    console.log("Loaded auth state from localStorage:", authState);
                }
            } catch (error) {
                console.log("Error loading auth state:", error);
            }
        }
        
        // Strict validation: must have all required fields
        if (authState && authState.isAuthenticated && authState.user && authState.accessToken) {
            const user = authState.user;
            
            if (profileContent) {
                profileContent.innerHTML = `
                    <div style="max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 12px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                        <h2 style="color: #4CAF50; margin: 0 0 20px 0;">‚úÖ WordPress Profile</h2>
                        <div style="display: grid; grid-template-columns: 150px 1fr; gap: 15px; align-items: center; text-align: left;">
                            <strong>Username:</strong>
                            <span>${user.username}</span>
                            <strong>Email:</strong>
                            <span>${user.email || "N/A"}</span>
                            <strong>Role:</strong>
                            <span style="color: white; background: ${user.role === "admin" ? "#ff5722" : "#2196F3"}; padding: 4px 12px; border-radius: 16px; font-size: 12px; font-weight: bold;">
                                ${user.role}
                            </span>
                            <strong>JWT:</strong>
                            <span style="font-family: monospace; font-size: 12px; color: #666; word-break: break-all;">
                                ${authState.accessToken.substring(0, 50)}...
                            </span>
                        </div>
                        <div style="margin-top: 25px; padding: 15px; background: #e7f3ff; border-radius: 6px; font-size: 14px; color: #2196F3;">
                            <strong>üî∑ WordPress:</strong> Successfully authenticated with remote system via localStorage persistence.
                        </div>
                        <div style="margin-top: 20px; display: flex; gap: 10px;">
                            <button onclick="logoutFromProfile()" 
                                    style="background: #f44336; color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer; font-weight: bold;">
                                üö™ Logout
                            </button>
                            <button onclick="checkWpProfile()" 
                                    style="background: #2196F3; color: white; border: none; padding: 10px 20px; border-radius: 6px; cursor: pointer; font-weight: bold;">
                                üîÑ Refresh Profile
                            </button>
                        </div>
                    </div>
                `;
            }
        } else {
            // Not authenticated - clear any invalid state
            localStorage.removeItem("wp_auth_state");
            
            if (profileContent) {
                profileContent.innerHTML = `
                    <div style="max-width: 500px; margin: 0 auto; background: white; padding: 40px; border-radius: 12px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); border: 2px solid #f44336;">
                        <div style="font-size: 64px; margin-bottom: 20px;">üîê</div>
                        <h2 style="color: #f44336; margin-bottom: 15px;">Unauthorized Access</h2>
                        <p style="color: #666; margin-bottom: 20px; font-size: 16px;">
                            You need to be authenticated to access this WordPress profile section.
                        </p>
                        <p style="color: #888; margin-bottom: 25px; font-size: 14px;">
                            Please login first using the authentication component on the home page.
                        </p>
                        <button onclick="window.location.href=\'' . home_url('/remote-component') . '\'" 
                                style="background: #2196F3; color: white; border: none; padding: 12px 24px; border-radius: 6px; cursor: pointer; font-size: 16px; font-weight: bold;">
                            üè† Go to Dashboard
                        </button>
                    </div>
                `;
				}
        }
    }
    
    // Logout function for profile page - Fixed
    function logoutFromProfile() {
        localStorage.removeItem("wp_auth_state");
        if (window.wpAuthState) {
            window.wpAuthState.isAuthenticated = false;
            window.wpAuthState.user = null;
            window.wpAuthState.accessToken = null;
        }
        
        // Broadcast logout message
        window.postMessage({
            type: "AUTH_LOGOUT"
        }, "*");
        
        checkWpProfile(); // Refresh the page
    }
    
    // Listen for logout messages
    window.addEventListener("message", (event) => {
        if (event.data.type === "AUTH_LOGOUT") {
            checkWpProfile(); // Refresh when logout happens
        }
    });
    
    // Check profile on load
    setTimeout(checkWpProfile, 500);
    
    // Check periodically for auth changes (reduced frequency)
    setInterval(checkWpProfile, 5000);
    </script>';
}
add_shortcode('wp_profile', 'wp_profile_shortcode');
?>